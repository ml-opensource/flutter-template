/// Generated by NStack, do not modify this file.

import 'package:flutter/widgets.dart';
import 'package:nstack/models/language.dart';
import 'package:nstack/models/nstack_config.dart';
import 'package:nstack/nstack.dart';
import 'package:nstack/partial/section_key_delegate.dart';

// Update this file by running:
// - `flutter pub run build_runner build`, if your package depends on Flutter
// - `pub run build_runner build` otherwise
      
class Localization {
	final defaultSection = const _DefaultSection();
	final error = const _Error();

	const Localization();
}

class _DefaultSection extends SectionKeyDelegate {
	const _DefaultSection(): super('default');

	String get cancel => get('cancel', "Cancel");
	String get ok => get('ok', "Ok");
	String get no => get('no', "No");
	String get yes => get('yes', "Yes");
	String get retry => get('retry', "Retry");
	String get edit => get('edit', "Edit");
	String get save => get('save', "Save");
	String get back => get('back', "Back");
	String get settings => get('settings', "Settings");
	String get later => get('later', "Later");
	String get next => get('next', "Next");
	String get previous => get('previous', "Previous");
	String get skip => get('skip', "Skip");
}

class _Error extends SectionKeyDelegate {
	const _Error(): super('error');

	String get authenticationError => get('authenticationError', "Login expired, please login again.");
	String get connectionError => get('connectionError', "No or bad connection, please try again.");
	String get errorTitle => get('errorTitle', "Error");
	String get unknownError => get('unknownError', "Unknown error, please try again.");
}

const _config = NStackConfig(projectId: 'k78R0OadfzZQmlhvKYkF1znwdQYShK1SCiLl', apiKey: 'e5tzJcRuIE3UsivDicjQZlI03TLgpWPEroOf');
    
const _languages = [
	Language(id: 11, name: 'English (UK)', locale: 'en-GB', direction: 'LRM', isDefault: true, isBestFit: true),
];

const _bundledTranslations = {
	'en-GB': r'''{"data":{"default":{"cancel":"Cancel","ok":"Ok","no":"No","yes":"Yes","retry":"Retry","edit":"Edit","save":"Save","back":"Back","settings":"Settings","later":"Later","next":"Next","previous":"Previous","skip":"Skip"},"error":{"authenticationError":"Login expired, please login again.","connectionError":"No or bad connection, please try again.","errorTitle":"Error","unknownError":"Unknown error, please try again."}},"meta":{"language":{"id":11,"name":"English (UK)","locale":"en-GB","direction":"LRM","is_default":false,"is_best_fit":false},"platform":{"id":564,"slug":"mobile"}}}''',
};

final _nstack = NStack<Localization>(
  config: _config,
  localization: const Localization(),
  availableLanguages: _languages,
  bundledTranslations: _bundledTranslations,
  pickedLanguageLocale: '',
);

class NStackWidget extends InheritedWidget {
  final NStack<Localization> nstack = _nstack;

  NStackWidget({Key? key, required Widget child})
    : super(key: key, child: child);

  static NStack of(BuildContext context) =>
      context.dependOnInheritedWidgetOfExactType<NStackWidget>()!.nstack;

  @override
  bool updateShouldNotify(NStackWidget oldWidget) =>
      nstack != oldWidget.nstack;
}

class NStackInitWidget extends StatefulWidget {
  final Widget child;

  const NStackInitWidget({Key? key, required Widget child})
      : child = child,
        super(key: key);

  @override
  _NStackInitState createState() => _NStackInitState();
}

class _NStackInitState extends State<NStackInitWidget> {
  static bool _initialized = false;

  void setupNStack(BuildContext context) {
    final locale = Localizations.localeOf(context);
    final nstack = NStackWidget.of(context);
    nstack.appOpen(locale);
  }

  @override
  Widget build(BuildContext context) {
    if (!_initialized) {
      setupNStack(context);
      _initialized = true;
    }
    return widget.child;
  }
}

/// Allows to access the Nstack Localization using the BuildContext
extension NStackWidgetExtension on BuildContext {
	Localization get localization => NStackWidget.of(this).localization;
}

/// Allows to access the Nstack Localization from StatefulWidget's State
extension NStackStateExtension<T extends StatefulWidget> on State<T> {
	Localization get localization => context.localization;
}

